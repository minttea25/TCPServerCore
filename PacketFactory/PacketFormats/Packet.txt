using System;
using System.Collections.Generic;
using System.Text;

using ServerCoreTCP;
using ServerCoreTCP.CustomPacket;

namespace {0}
{{
    public class {1} : IPacket
    {{
        public ushort PacketType {{ get; private set; }} = (ushort)Packets.{1}; // 1st
        {2}

        public ArraySegment<byte> Serialize()
        {{
            ArraySegment<byte> buffer = SendBufferTLS.Reserve({3});
            bool suc = true;
            int offset = 0;

            Span<byte> span = new Span<byte>(buffer.Array, buffer.Offset, buffer.Count);

            offset += sizeof(ushort);

            suc &= BitConverter.TryWriteBytes(span.Slice(offset, sizeof(ushort)), PacketType);
            offset += sizeof(ushort);

            {6}
            suc &= BitConverter.TryWriteBytes(span.Slice(0, sizeof(ushort)), (ushort)offset);

            return suc == true ? SendBufferTLS.Return(offset) : null;
        }}

        public void Deserialize(ReadOnlySpan<byte> span)
        {{
            int offset = 0;

            offset += sizeof(ushort);

            PacketType = BitConverter.ToUInt16(span.Slice(offset, sizeof(ushort)));
            offset += sizeof(ushort);

            {7}
        }}
    }}
}}
