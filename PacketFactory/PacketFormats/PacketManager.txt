using System;
using System.Collections.Generic;

using ServerCoreTCP;
using ServerCoreTCP.CustomPacket;

namespace {0}
{{
    public class PacketManager
    {{
        #region Singleton
        static PacketManager _instance = new PacketManager();
        public static PacketManager Instance {{ get {{ return _instance; }} }}
        #endregion

        /// <summary>
        /// Key is Packets(ushort); Value: the func returns a created packet with the received buffer.
        /// </summary>
        Dictionary<ushort, Func<Session, ArraySegment<byte>, IPacket>> _packetFactory = new Dictionary<ushort, Func<Session, ArraySegment<byte>, IPacket>>();

        /// <summary>
        /// Value: action which handles the packet(ushort, Packets).
        /// </summary>
        Dictionary<ushort, Action<IPacket, Session>> _handlers = new Dictionary<ushort, Action<IPacket, Session>>();

        public PacketManager()
        {{
            {1}
        }}

        public void OnRecvPacket(Session session, ArraySegment<byte> buffer, Action<Session, IPacket> callback = null)
        {{
            int offset = 0;

            // The whole size of the received packet
            ushort size = BitConverter.ToUInt16(buffer.Array, buffer.Offset + offset);
            offset += sizeof(ushort);

            // The type of the received packet
            ushort pkt = BitConverter.ToUInt16(buffer.Array, buffer.Offset + offset);
            offset += sizeof(ushort);

            if (_packetFactory.TryGetValue(pkt, out var factory))
            {{
                IPacket packet = factory.Invoke(session, buffer);

                callback?.Invoke(session, packet);

                HandlePacket(packet, session);
            }}
        }}

        static T MakePacket<T>(Session session, ArraySegment<byte> buffer) where T : IPacket, new()
        {{
            T packet = new T();
            packet.Deserialize(buffer);
            return packet;
        }}

        void HandlePacket(IPacket packet, Session session)
        {{
            if (_handlers.TryGetValue(packet.PacketType, out var action))
            {{
                action.Invoke(packet, session);
            }}
        }}
    }}
}}
